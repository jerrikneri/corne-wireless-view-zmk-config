/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            display-name = "Base";
            bindings = <
&kp TAB                     &kp Q  &kp W  &kp E     &kp R  &kp T        &kp Y    &kp U  &kp I      &kp O    &kp P     &kp BSPC
&mt LCTRL ESCAPE            &kp A  &kp S  &kp D     &kp F  &kp G        &kp H    &kp J  &kp K      &kp L    &kp SEMI  &lt 3 SQT
&mt LSHFT LEFT_PARENTHESIS  &kp Z  &kp X  &kp C     &kp V  &kp B        &kp N    &kp M  &kp COMMA  &kp DOT  &kp FSLH  &mt RIGHT_SHIFT RIGHT_PARENTHESIS
                                          &kp LGUI  &mo 1  &kp SPACE    &kp RET  &mo 2  &kp RALT
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            display-name = "Lower";
            bindings = <
&kp GRAVE      &kp N1                &kp N2          &kp N3              &kp N4               &kp N5               &kp N6    &kp N7    &kp N8    &kp N9     &kp N0  &kp BSPC
&kp LG(SPACE)  &kp LG(LS(NUMBER_4))  &kp LG(LS(N5))  &kp LC(LEFT_ARROW)  &kp LC(RIGHT_ARROW)  &kp LEFT_BRACKET     &kp LEFT  &kp DOWN  &kp UP    &kp RIGHT  &trans  &trans
&trans         &kp LG(LA(J))         &trans          &kp LC(UP_ARROW)    &kp LG(F3)           &kp RIGHT_BRACKET    &trans    &trans    &trans    &trans     &trans  &trans
                                                     &kp LGUI            &trans               &bootloader          &kp RET   &trans    &kp RALT
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            display-name = "Raise";
            bindings = <
&kp TAB    &kp EXCL   &kp AT  &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET    &kp AMPS   &kp KP_MULTIPLY  &kp LPAR                  &kp RPAR                   &kp BSPC
&kp LCTRL  &trans     &trans  &trans    &trans    &trans       &kp EQUAL    &kp MINUS  &kp LBKT         &kp LG(LS(LEFT_BRACKET))  &kp LG(LS(RIGHT_BRACKET))  &kp GRAVE
&kp LSHFT  &kp GRAVE  &trans  &trans    &trans    &trans       &kp PLUS     &kp PLUS   &kp LBRC         &kp LG(LEFT_BRACKET)      &kp LG(RIGHT_BRACKET)      &kp TILDE
                              &kp LGUI  &trans    &kp SPACE    &bootloader  &trans     &kp RALT
            >;
        };

        fn {
            bindings = <
&trans      &kp F1        &trans        &trans        &trans        &trans          &trans  &trans  &trans  &trans  &trans  &trans
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans  &trans  &trans  &trans  &trans  &trans
&trans      &trans        &trans        &trans        &trans        &trans          &trans  &trans  &trans  &trans  &trans  &trans
                                        &trans        &trans        &trans          &trans  &trans  &trans
            >;
        };
    };
};
